/*=========================================
 C++ class definitions exported from AngelScript.
 This is automatically generated by the tools.
 DO NOT modify this manually! Edit the corresponding .as files instead!
 BSOD-Games, All Rights Reserved.
==========================================*/

#pragma once

#include <angelscript.h>
#include "Scripts/ScriptVar.h"
#include "Scripts/ScriptObject.h"

// ----------------------------------
// ENUMS
// ----------------------------------


// ----------------------------------
// FUNCTIONS
// ----------------------------------

int32 execGameInit()
{
	asIScriptContext*		scriptContext = GScriptEngine->GetASScriptEngine()->CreateContext();
	check( scriptContext );

	asIScriptFunction*		function = GScriptEngine->GetASScriptEngine()->GetModule( "TestbedGame" )->GetFunctionByIndex( 0 );
	check( function );

	int32	result = scriptContext->Prepare( function );
	check( result >= 0 );

	result = scriptContext->Execute();
	check( result >= 0 );

	int32		returnValue = scriptContext->GetReturnDWord();
	scriptContext->Release();
	return returnValue;
}

// ----------------------------------
// CLASSES
// ----------------------------------

class OTBGameInfo : public ScriptObject
{
	//## BEGIN PROPS TBGameInfo
public:
	ScriptVar< EGameMode > gameMode;
	//## END PROPS TBGameInfo

public:
	OTBGameInfo() : ScriptObject( 1, TEXT( "TestbedGame" ) )
	{
		gameMode.Init( 0, self );
	}

	std::string execGetGameName()
	{
		asIScriptContext*		scriptContext = GScriptEngine->GetASScriptEngine()->CreateContext();
		check( scriptContext );
	
		asIScriptFunction*		function = typeInfo->GetMethodByIndex( 0 );
		check( function );
	
		int32	result = scriptContext->Prepare( function );
		check( result >= 0 );
	
		result = scriptContext->SetObject( self );
		check( result >= 0 );
	
		result = scriptContext->Execute();
		check( result >= 0 );
	
		std::string		returnValue = *( ( std::string* )scriptContext->GetReturnObject() );
		scriptContext->Release();
		return returnValue;
	}

	void execSetGameMode( EGameMode Param0 )
	{
		asIScriptContext*		scriptContext = GScriptEngine->GetASScriptEngine()->CreateContext();
		check( scriptContext );
	
		asIScriptFunction*		function = typeInfo->GetMethodByIndex( 1 );
		check( function );
	
		int32	result = scriptContext->Prepare( function );
		check( result >= 0 );
	
		result = scriptContext->SetObject( self );
		check( result >= 0 );
	
		scriptContext->SetArgDWord( 0, Param0 );
	
		result = scriptContext->Execute();
		check( result >= 0 );
		scriptContext->Release();
	}
};

// ----------------------------------
// GLOBAL VALUES
// ----------------------------------

extern ScriptVar< OTBGameInfo >		GTBGameInfo;

// ----------------------------------
// INITIALIZATION MACROS
// ----------------------------------

#define DECLARATE_GLOBALVALUES_SCRIPTMODULE_TestbedGame \
	ScriptVar< OTBGameInfo >		GTBGameInfo;

// ----------------------------------
// INITIALIZATION FUNCTION
// ----------------------------------

void InitScriptModule_TestbedGame()
{
	GTBGameInfo.Init( 0, TEXT( "TestbedGame" ) );
}